// console.log(dados[1].descricao);

// section.innerHTML = 
//     `
//     <div class="item-resultado">
//     <h2>
//             <a href="${dados[0].link}" target="_blank">${dados[0].titulo}</a>
//             </h2>

//             <img src="${dados[0].imagem}" alt="${dados[0].titulo}">

//             <p class="descricao-meta">${dados[0].descricao}</p>
//         </div>
//     `


// Fun√ß√£o que realiza a pesquisa e exibe os resultados
function procurar() {

    // Obt√©m a refer√™ncia do elemento HTML onde os resultados ser√£o exibidos
    let section = document.getElementById("resultados-pesquisa");

    let campoPesquisa = document.getElementById ("campo-pesquisa").value.toLowerCase();
    // Padr√£o Camel case (formato de camelo): Conven√ß√£o de escrita onde as palavras s√£o escritas juntas sem espa√ßo e a primeira letra de cada palavra (exceto a primeira) √© escrita em mai√∫scula.

    // Inicializa uma string vazia para armazenar o HTML dos resultados
    let resultados = "";
    let titulo = "";
    let descricao = "";
    let tags = "";

    // Itera sobre cada item na lista de dados
    // Para cada dado dentro da lista de dados, eu quero criar um elemento HTML que contenha o t√≠tulo, a imagem e a descri√ß√£o do jogo.
    for (let tag of tagsHtml) {
        titulo = tag.titulo.toLowerCase()
        descricao = tag.descricao.toLowerCase()
        tags = tag.tags.toLowerCase()
        // se no dado titulo includes campoPesquisa ent√£o fa√ßa...
        if (tag.titulo.includes(campoPesquisa)||
            tag.descricao.includes(campoPesquisa) ||
            tag.tags.includes(campoPesquisa)) {

            // Concatena o HTML de cada resultado √† string 'resultados'
            resultados += // O += vai adicionar o conte√∫do do HTML dentro da vari√°vel section.
            `
            <div class="item-resultado">
                <h2>
                    <img src="/√çcones/html-5-svgrepo-com.svg" alt="√≠cone do HTML5" width="50" height="50"> ${tag.titulo}
                </h2>
                
                <p class="descricao-meta">${tag.descricao.replace(/</g, '&lt;').replace(/>/g, '&gt;')}</p>
                <p class="descricao-meta"><a href = "${tag.linkW3Schools}" target="_blank"> Clique aqui para ver uma explica√ß√£o apofundada.</a></p>
                
                <img src="${tag.imagem}" alt="${tag.titulo}">

                <h3><a href="${tag.tenteVoceMesmo}" target="_blank">Ponha a m√£o na massa üëæ</a></h3>
            </div>
            `
            //Observa√ß√£o quanto ao replace(/</g, '<').replace(/>/g, '>'): Essa parte do c√≥digo substitui todas as ocorr√™ncias de < por < e > por > dentro da string tag.descricao. Isso garante que as tags HTML dentro da descri√ß√£o sejam exibidas como texto plano. Sugest√£o do Gemini!
        }
    };

    for (let conceito of cssConceitos) {
        if (conceito.titulo.toLowerCase().includes(campoPesquisa)||
            conceito.descricao.toLowerCase().includes(campoPesquisa)||
            conceito.tags.toLowerCase().includes(campoPesquisa)) {
        // Concatena o HTML de cada resultado √† string 'resultados'
        resultados += // O += vai adicionar o conte√∫do do HTML dentro da vari√°vel section.
            `
            <div class="item-resultado">
                <h2>
                    <img src="/√çcones/css-3-svgrepo-com.svg" alt="√≠cone do CSS" width="50" height="50"> ${conceito.titulo}
                </h2>
                
                <p class="descricao-meta">${conceito.descricao.replace(/</g, '&lt;').replace(/>/g, '&gt;')}</p>
                <p class="descricao-meta"><a href = "${conceito.linkW3Schools}" target="_blank"> Clique aqui para ver uma explica√ß√£o apofundada.</a></p>
                
                <img src="${conceito.imagem}" alt="${conceito.titulo}">

                <h3><a href="${conceito.tenteVoceMesmo}" target="_blank">Ponha a m√£o na massa üëæ</a></h3>
            </div>
            `
            //Observa√ß√£o quanto ao replace(/</g, '<').replace(/>/g, '>'): Essa parte do c√≥digo substitui todas as ocorr√™ncias de < por < e > por > dentro da string tag.descricao. Isso garante que as tags HTML dentro da descri√ß√£o sejam exibidas como texto plano. Sugest√£o do Gemini!
        }
    };

    for (let conceito of jsConceitos) {
        if (conceito.titulo.toLowerCase().includes(campoPesquisa)||
            conceito.descricao.toLowerCase().includes(campoPesquisa)||
            conceito.tags.toLowerCase().includes(campoPesquisa)) {
        // Concatena o HTML de cada resultado √† string 'resultados'
        resultados += // O += vai adicionar o conte√∫do do HTML dentro da vari√°vel section.
        `
        <div class="item-resultado">
            <h2>
                <img src="/√çcones/javascript-svgrepo-com.svg" alt="√≠cone do JavaScript" width="50" height="50"> ${conceito.titulo}
            </h2>
            
            <p class="descricao-meta">${conceito.descricao.replace(/</g, '&lt;').replace(/>/g, '&gt;')}</p>
            <p class="descricao-meta"><a href = "${conceito.linkW3Schools}" target="_blank"> Clique aqui para ver uma explica√ß√£o apofundada.</a></p>
            
            <img src="${conceito.imagem}" alt="${conceito.titulo}">

            <h3><a href="${conceito.tenteVoceMesmo}" target="_blank">Ponha a m√£o na massa üëæ</a></h3>
        </div>
        `
        //Observa√ß√£o quanto ao replace(/</g, '<').replace(/>/g, '>'): Essa parte do c√≥digo substitui todas as ocorr√™ncias de < por < e > por > dentro da string tag.descricao. Isso garante que as tags HTML dentro da descri√ß√£o sejam exibidas como texto plano. Sugest√£o do Gemini!
        }      
    }

    if (!resultados) {
        resultados = "<p> Nada foi encontrado, foi mal, sou noob üòÑ </p>"
    }
    
    // Insere o HTML gerado no elemento 'section'
    section.innerHTML = resultados;
}
